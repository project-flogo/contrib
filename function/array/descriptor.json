{
    "name": "array",
    "type": "flogo:function",
    "version": "0.10.0",
    "title": "arrayFunctions",
    "description": "arrayFunctions",
    "functions": [
        {
            "name": "append",
            "description": "Append item to exist array",
            "example": "array.append($activity[xxx].array, \"new Item\") => [$activity.array, \"new Item\"]",
            "args": [
                {
                    "name": "items",
                    "type": "array",
                    "valueType": "any"
                },
                {
                    "name": "item",
                    "type": "any"
                }
            ],
            "return": {
                "type": "array",
                "valueType": "any"
            }
        },
        {
            "name": "contains",
            "description": "Returns true if the item is found in the given array else returns false. The item type must match with the array type.",
            "example": "array.contains(array.create(\"A\",\"B\",\"C\"), \"B\") => true",
            "args": [
                {
                    "name": "array",
                    "type": "array",
                    "valueType": "any"
                },
                {
                    "name": "item",
                    "type": "any"
                }
            ],
            "return": {
                "type": "boolean"
            }
        },
        {
            "name": "count",
            "description": "Count the length of an array",
            "example": "array.count($activity.array) =>  2",
            "args": [
                {
                    "name": "items",
                    "type": "array",
                    "valueType": "any"
                }
            ],
            "return": {
                "type": "int"
            }
        },
        {
            "name": "create",
            "description": "Create an array of *primitive types* from the given items. All items must be same primitive types e.g. string, integer etc and must match with the field type where this function is used.",
            "example": "array.create(\"A\",\"B\",\"C\") => [\"A\",\"B\",\"C\"]",
            "varArgs": true,
            "args": [
                {
                    "name": "item1",
                    "type": "any"
                },
                {
                    "name": "item2",
                    "type": "any"
                }
            ],
            "return": {
                "type": "array",
                "valueType": "any"
            }
        },
        {
            "name": "delete",
            "description": "Delete the specific index of item in an array",
            "example": "array.delete(array.create(\"item1\",\"item2\"), 1) => [item1]",
            "args": [
                {
                    "name": "items",
                    "type": "array",
                    "valueType": "any"
                },
                {
                    "name": "index",
                    "type": "int"
                }
            ],
            "return": {
                "type": "array",
                "valueType": "any"
            }
        },
        {
            "name": "get",
            "description": "Get the specify index of item in an array",
            "example": "array.get(array.create(\"item1\",\"item2\"), 1) => item2",
            "args": [
                {
                    "name": "items",
                    "type": "array",
                    "valueType": "any"
                },
                {
                    "name": "index",
                    "type": "int"
                }
            ],
            "return": {
                "type": "any"
            }
        },
        {
            "name": "sum",
            "description": "Sum all element of the array and the array must be number array => it returns float64",
            "example": "array.sum(array.create(1,2)) => 3",
            "args": [
                {
                    "name": "items",
                    "type": "array",
                    "valueType": "any"
                }
            ],
            "return": {
                "type": "float64"
            }
        },
        {
            "name": "slice",
            "description": "Extracts a part an array by specifying a half-open range with start index and an end index (the element at the end index is excluded).",
            "example": "array.slice(array.create(1,2,3,4,5), 1, 3) => [2,3]",
            "args": [
               {
                    "name": "items",
                    "type": "array",
                    "valueType": "any"
                },
                {
                    "name": "start",
                    "type": "int"
                },
                {
                    "name": "end",
                    "type": "int",
                    "required": false
                }
            ],
            "return": {
                "type": "array",
                "valueType": "any"
            }
        },
        {
            "name": "reverse",
            "description": "Reverse array elements",
            "example": "array.reverse(array.create(1,2)) => [2,1]",
            "args": [
                {
                    "name": "items",
                    "type": "array",
                    "valueType": "any"
                }
            ],
            "return": {
                "type": "array",
                "valueType": "any"
            }
        },
        {
            "name": "merge",
            "description": "Merge arrays into one",
            "example": "array.merge(array.create(1,2), array.create(3,4)) => [1,2,3,4]",
            "varArgs": true,
            "args": [
                {
                    "name": "items1",
                    "type": "array",
                    "valueType": "any"
                },
                {
                    "name": "items2",
                    "type": "array",
                    "valueType": "any"
                }
            ],
            "return": {
                "type": "array",
                "valueType": "any"
            }
        },
        {
            "name": "flatten",
            "description": "Creates a new array with all sub-array elements concatenated into it recursively up to the specified depth, default depth to -1 goes to no depth limit",
            "example": "array.flatten(\"[1, 2, [3, 4, [5, 6, [7, 8, [9, 10]]]]]\", -1) => [1,2,3,4,5,6,7,8,9,10]",
            "args": [
               {
                    "name": "items",
                    "type": "array",
                    "valueType": "any"
                },
                {
                    "name": "depth",
                    "type": "int",
                    "value": -1
                }
            ],
            "return": {
                "type": "array",
                "valueType": "any"
            }
        }
    ]
}
